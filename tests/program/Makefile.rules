# debug in reshape
all: 5x3R.py lattices/5x3R.py 5x3R.yap.test
# new hydrogen-ordered family
all: A.yap.test   B.yap.test  13.yap.test
all: 3.ar3a.test   0.nx3a.test  5.gro.test   7.mdv.test
# loader2 test
all: 5.gro_gro.test 7.mdva_gro.test 0.nx3a_gro.test 7.mdv_gro.test
all: 16.py   17.nx4a.test 1c.ar3r.test CS1.cif.test
all: CS2.cif.test HS1.xyz.test TS1.yap.test 2dL.gro 
all: 7.mdva.test
#all: test19.done
all: 1hreshape.py.test 2D3.ringtest.test prism7.ringtest.test
all: 3xFAU.yap.test
all: T.pov.test
# all: MTN.gro MTN.re.gro.test
# all: ITT.gro.test
all: 7.analice.yap.test
all: 2D3.analice.yap.test
all: 1h.ringstat.test
all: iceT2.kg.test
all: RHO.dep.yap.test
all: 9.yap.test dtc.yap.test # 5R.yap.test iceR.yap.test
all: 2d.gro.test
all: 4.ngph.test
all: test1.done   test2.done   test3.done   test4.done
all: 12.scad.test HS3.rings.yap.test
all: Ihhccc.nx4a.test
all: helps
all: c0te.yap.test c1te.yap.test ice1hte.yap.test

helps: 7.gro
	$(GENICE) \?
	$(GENICE) 2\?
	$(GENICE) 2 -f \?
	$(GENICE) 2 -f q\?
	$(GENICE) 2 -w \?
	$(ANALICE) 7.gro
	$(ANALICE) 7.gro -f \?
	$(ANALICE) 7.gro -f q\?
	$(ANALICE) 7.gro -w \?

%.test: $(REFD)/% %
	diff $^ && touch $@
%.rings.yap: $(FMT)/rings.py
	$(GENICE) $* -f rings | fgrep -v "Command line:" > $@
%.ringstat: $(FMT)/_ringstat.py
	$(GENICE) $* -f _ringstat -r 2 2 2 | fgrep -v "Command line:" > $@
iceT2.kg: $(FMT)/_KG.py
	$(GENICE) iceT2 -f _KG --depol=optimal | fgrep -v "Command line:" > $@
%.dep.yap:
	$(GENICE) $* --visual $@ -r 2 2 2 > /dev/null
%.yap: $(FMT)/yaplot.py
	$(GENICE) $* -f yaplot | fgrep -v "Command line:" > $@
test1.done: $(FMT)/gromacs.py
	$(GENICE) __test1 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test1.done
test2.done: $(FMT)/gromacs.py
	$(GENICE) __test2 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test2.done
test3.done: $(FMT)/gromacs.py
	$(GENICE) __test3 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test3.done
test4.done: $(FMT)/gromacs.py
	$(GENICE) __test4 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test4.done
2d.gro: $(FMT)/gromacs.py
	$(GENICE) 2d --rep 2 2 3 | fgrep -v "Command line:" > $@
3.ar3a: $(FMT)/com.py
	$(GENICE) 3  --rep 2 2 3 --format c | fgrep -v "Command line:" > $@
4.ngph: $(FMT)/digraph.py
	$(GENICE) 4  --rep 2 2 3 --format d | fgrep -v "Command line:" > $@
%.nx3a:  $(FMT)/euler.py
	$(GENICE) $* --rep 2 2 3 --format e | fgrep -v "Command line:" > $@
5.gro: $(FMT)/gromacs.py
	$(GENICE) 5  --rep 2 2 4 --format g | fgrep -v "Command line:" > $@
7.mdv: $(FMT)/mdview.py
	$(GENICE) 7  --rep 2 2 4 --format m | fgrep -v "Command line:" > $@
7.mdva: $(FMT)/mdv_au.py
	$(GENICE) 7  --rep 2 2 4 --format mdv_au | fgrep -v "Command line:" > $@
12.scad: $(FMT)/openscad.py
	$(GENICE) 12 --rep 2 2 3 --format o | fgrep -v "Command line:" > $@
16.py: $(FMT)/python.py
	$(GENICE) 16 --rep 1 1 2 --format p | fgrep -v "Command line:" > $@
17.nx4a: $(FMT)/quaternion.py
	$(GENICE) 17 --rep 1 1 2 --format q | fgrep -v "Command line:" > $@
1c.ar3r: $(FMT)/rcom.py
	$(GENICE) 1c --rep 1 1 2 --format r | fgrep -v "Command line:" > $@
CS1.cif: $(FMT)/cif.py
	$(GENICE) CS1 --guest 14=g14*0.5 -G 0=me --rep 1 1 2 --format cif | fgrep -v "Command line:" > $@
CS2.cif: $(FMT)/cif2.py
	$(GENICE) CS2 --depol=none -c 0=Na -a 1=Cl --rep 1 1 2 --format cif2 | fgrep -v "Command line:" > $@
#;$(UTIL)/cifdiff.sh $(REFD)/$@ $@
HS1.xyz: $(FMT)/exyz.py
#test for spot semiclathrate (TBAB)
	$(GENICE) HS1 --depol=none -c 3=N -a 1=Br -H 6=Bu-:3 -H 0=Bu-:3 -H 1=Bu-:3 -H 2=Bu-:3 --rep 1 1 2 --format exyz | fgrep -v "Command line:" > $@
TS1.yap: $(FMT)/yaplot.py
	$(GENICE) TS1 --guest 12=g12 --rep 1 1 2 --format yaplot | fgrep -v "Command line:" > $@ 
c0te.yap: $(FMT)/yaplot.py
	$(GENICE) c0te --guest Ne1=g12 --rep 1 1 2 --format yaplot | fgrep -v "Command line:" > $@ 
c1te.yap: $(FMT)/yaplot.py
	$(GENICE) c1te --guest Ne1=g12 --rep 1 1 2 --format yaplot | fgrep -v "Command line:" > $@ 
ice1hte.yap: $(FMT)/yaplot.py
	$(GENICE) ice1hte --guest Ne1=g12 --rep 1 1 2 --format yaplot | fgrep -v "Command line:" > $@ 
T.pov: $(FMT)/povray.py
	$(GENICE) T --guest 12=g12 --rep 1 1 1 --format povray | fgrep -v "Command line:" > $@
2dL.gro: $(FMT)/gromacs.py
	$(GENICE) 2d --rep 6 6 6 | fgrep -v "Command line:" > $@
1hreshape.py: $(FMT)/reshape.py
	$(GENICE) 1h --rep 1 1 1 --format reshape[1,1,-2,1,-1,0,1,1,1] | fgrep -v "Command line:" > $@
2D3.ringtest: $(FMT)/_ringstat.py
	$(GENICE) 2D3 --rep 5 5 1 --format _ringstat --depol=optimal | fgrep -v "Command line:" > $@
prism7.ringtest: $(FMT)/_ringstat.py
	$(GENICE) prism[7] --rep 1 1 1 --format _ringstat --depol=optimal | fgrep -v "Command line:" > $@
3xFAU.yap: $(FMT)/yaplot.py
	$(GENICE) xFAU[3] --rep 1 1 1 --format yaplot | fgrep -v "Command line:" > $@
7.gro: $(FMT)/gromacs.py
	$(GENICE) 7 -r 2 2 2 | fgrep -v "Command line:" > $@


# they are now in a separate module.
#MTN.gro: $(LTC)/zeolite.py $(FMT)/gromacs.py
#	$(GENICE) zeolite[MTN] --rep 1 1 1 | fgrep -v "Command line:" > $@
#MTN.re.gro: MTN.cif $(LTC)/cif.py $(FMT)/gromacs.py
#	$(GENICE) cif[MTN.cif] --rep 1 1 1 | fgrep -v "Command line:" > $@
#ITT.gro: $(LTC)/zeolite.py $(FMT)/gromacs.py
#	$(GENICE) zeolite[ITT] --rep 1 1 1 | fgrep -v "Command line:" > $@
7.analice.yap: 7.gro $(FMT)/yaplot.py
	$(ANALICE) $< -f yaplot --debug | fgrep -v "Command line:" > $@
2D3.gro: $(FMT)/gromacs.py
	$(GENICE) 2D3 -r 4 4 1 --depol=optimal | fgrep -v "Command line:" > $@
2D3.analice.yap: 2D3.gro $(FMT)/yaplot.py
	$(ANALICE) $< -f yaplot | fgrep -v "Command line:" > $@

# loader2 test
# ar3rの場合、配向はランダムで決める必要があるが、analiceは乱数利用を想定していないので、
# 現時点ではar3aの読み込みは公式にはサポートしない。
#%.ar3r_gro: %.ar3r $(LDR)/ar3r.py
#	$(ANALICE) $< | fgrep -v "Command line:" > $@
%.mdva_gro: %.mdva $(LDR)/mdva.py
	$(ANALICE) $< | fgrep -v "Command line:" > $@
%.mdv_gro: %.mdv $(LDR)/mdv.py
	$(ANALICE) $< | fgrep -v "Command line:" > $@
%.gro_gro: %.gro $(LDR)/gro.py
	$(ANALICE) $< -O O -H H | fgrep -v "Command line:" > $@
%.nx3a_gro: %.nx3a $(LDR)/nx3a.py
	$(ANALICE) $< --debug | fgrep -v "Command line:" > $@

# ice one with stacking faults.
Ihhccc.nx4a:
	$(GENICE) one[hhccc] -r 2 2 1 -f q | fgrep -v "Command line:" > $@


# reshape debug
5x3R.py:
	$(GENICE) 5 -r 1 1 3 -f reshape[1,0,0,0,1,0,1,0,1] | fgrep -v "Command line:" > $@
lattices/5x3R.py: 5x3R.py
	-mkdir lattices
	cp $< lattices
5x3R.yap: lattices/5x3R.py
	$(GENICE) 5x3R -f y | fgrep -v "Command line:" > $@
